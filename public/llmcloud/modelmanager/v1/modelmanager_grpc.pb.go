// Copyright 2023 Groq Inc.
// All Rights Reserved.
//
// Definition of the Inference API Service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: public/llmcloud/modelmanager/v1/modelmanager.proto

package modelmanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModelManagerService_ListModels_FullMethodName = "/public.llmcloud.modelmanager.v1.ModelManagerService/ListModels"
)

// ModelManagerServiceClient is the client API for ModelManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelManagerServiceClient interface {
	// lists all available models a client can select
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
}

type modelManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelManagerServiceClient(cc grpc.ClientConnInterface) ModelManagerServiceClient {
	return &modelManagerServiceClient{cc}
}

func (c *modelManagerServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, ModelManagerService_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelManagerServiceServer is the server API for ModelManagerService service.
// All implementations must embed UnimplementedModelManagerServiceServer
// for forward compatibility
type ModelManagerServiceServer interface {
	// lists all available models a client can select
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	mustEmbedUnimplementedModelManagerServiceServer()
}

// UnimplementedModelManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelManagerServiceServer struct {
}

func (UnimplementedModelManagerServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelManagerServiceServer) mustEmbedUnimplementedModelManagerServiceServer() {}

// UnsafeModelManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelManagerServiceServer will
// result in compilation errors.
type UnsafeModelManagerServiceServer interface {
	mustEmbedUnimplementedModelManagerServiceServer()
}

func RegisterModelManagerServiceServer(s grpc.ServiceRegistrar, srv ModelManagerServiceServer) {
	s.RegisterService(&ModelManagerService_ServiceDesc, srv)
}

func _ModelManagerService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelManagerServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelManagerService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelManagerServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelManagerService_ServiceDesc is the grpc.ServiceDesc for ModelManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.llmcloud.modelmanager.v1.ModelManagerService",
	HandlerType: (*ModelManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModels",
			Handler:    _ModelManagerService_ListModels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/llmcloud/modelmanager/v1/modelmanager.proto",
}
