// Copyright 2023 Groq Inc.
// All Rights Reserved.
//
// Definition of the Shim Service
// This is the inverse of the Inference API Service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: public/llmcloud/inferencemanager/v1/inference_result_service.proto

package inferencemanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InferenceResultService_GetResult_FullMethodName = "/public.llmcloud.inferencemanager.v1.InferenceResultService/GetResult"
)

// InferenceResultServiceClient is the client API for InferenceResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InferenceResultServiceClient interface {
	// returns the query at the the top of the priority queue
	GetResult(ctx context.Context, opts ...grpc.CallOption) (InferenceResultService_GetResultClient, error)
}

type inferenceResultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInferenceResultServiceClient(cc grpc.ClientConnInterface) InferenceResultServiceClient {
	return &inferenceResultServiceClient{cc}
}

func (c *inferenceResultServiceClient) GetResult(ctx context.Context, opts ...grpc.CallOption) (InferenceResultService_GetResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &InferenceResultService_ServiceDesc.Streams[0], InferenceResultService_GetResult_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &inferenceResultServiceGetResultClient{stream}
	return x, nil
}

type InferenceResultService_GetResultClient interface {
	Send(*InferenceResultServiceGetResultRequest) error
	CloseAndRecv() (*InferenceResultServiceGetResultResponse, error)
	grpc.ClientStream
}

type inferenceResultServiceGetResultClient struct {
	grpc.ClientStream
}

func (x *inferenceResultServiceGetResultClient) Send(m *InferenceResultServiceGetResultRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *inferenceResultServiceGetResultClient) CloseAndRecv() (*InferenceResultServiceGetResultResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InferenceResultServiceGetResultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InferenceResultServiceServer is the server API for InferenceResultService service.
// All implementations must embed UnimplementedInferenceResultServiceServer
// for forward compatibility
type InferenceResultServiceServer interface {
	// returns the query at the the top of the priority queue
	GetResult(InferenceResultService_GetResultServer) error
	mustEmbedUnimplementedInferenceResultServiceServer()
}

// UnimplementedInferenceResultServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInferenceResultServiceServer struct {
}

func (UnimplementedInferenceResultServiceServer) GetResult(InferenceResultService_GetResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedInferenceResultServiceServer) mustEmbedUnimplementedInferenceResultServiceServer() {
}

// UnsafeInferenceResultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InferenceResultServiceServer will
// result in compilation errors.
type UnsafeInferenceResultServiceServer interface {
	mustEmbedUnimplementedInferenceResultServiceServer()
}

func RegisterInferenceResultServiceServer(s grpc.ServiceRegistrar, srv InferenceResultServiceServer) {
	s.RegisterService(&InferenceResultService_ServiceDesc, srv)
}

func _InferenceResultService_GetResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InferenceResultServiceServer).GetResult(&inferenceResultServiceGetResultServer{stream})
}

type InferenceResultService_GetResultServer interface {
	SendAndClose(*InferenceResultServiceGetResultResponse) error
	Recv() (*InferenceResultServiceGetResultRequest, error)
	grpc.ServerStream
}

type inferenceResultServiceGetResultServer struct {
	grpc.ServerStream
}

func (x *inferenceResultServiceGetResultServer) SendAndClose(m *InferenceResultServiceGetResultResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *inferenceResultServiceGetResultServer) Recv() (*InferenceResultServiceGetResultRequest, error) {
	m := new(InferenceResultServiceGetResultRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InferenceResultService_ServiceDesc is the grpc.ServiceDesc for InferenceResultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InferenceResultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.llmcloud.inferencemanager.v1.InferenceResultService",
	HandlerType: (*InferenceResultServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResult",
			Handler:       _InferenceResultService_GetResult_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "public/llmcloud/inferencemanager/v1/inference_result_service.proto",
}
