// Copyright 2023 Groq Inc.
// All Rights Reserved.
//
// Definition of the QueueManager API Service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: public/llmcloud/queuestatemanager/v1/queuestatemanager.proto

package queuestatemanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueueStateManagerService_GetRequestState_FullMethodName = "/public.llmcloud.queuestatemanager.v1.QueueStateManagerService/GetRequestState"
)

// QueueStateManagerServiceClient is the client API for QueueStateManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueStateManagerServiceClient interface {
	// Returns the request's place in the queue
	GetRequestState(ctx context.Context, in *GetRequestStateRequest, opts ...grpc.CallOption) (*GetRequestStateResponse, error)
}

type queueStateManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueStateManagerServiceClient(cc grpc.ClientConnInterface) QueueStateManagerServiceClient {
	return &queueStateManagerServiceClient{cc}
}

func (c *queueStateManagerServiceClient) GetRequestState(ctx context.Context, in *GetRequestStateRequest, opts ...grpc.CallOption) (*GetRequestStateResponse, error) {
	out := new(GetRequestStateResponse)
	err := c.cc.Invoke(ctx, QueueStateManagerService_GetRequestState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueStateManagerServiceServer is the server API for QueueStateManagerService service.
// All implementations must embed UnimplementedQueueStateManagerServiceServer
// for forward compatibility
type QueueStateManagerServiceServer interface {
	// Returns the request's place in the queue
	GetRequestState(context.Context, *GetRequestStateRequest) (*GetRequestStateResponse, error)
	mustEmbedUnimplementedQueueStateManagerServiceServer()
}

// UnimplementedQueueStateManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueStateManagerServiceServer struct {
}

func (UnimplementedQueueStateManagerServiceServer) GetRequestState(context.Context, *GetRequestStateRequest) (*GetRequestStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestState not implemented")
}
func (UnimplementedQueueStateManagerServiceServer) mustEmbedUnimplementedQueueStateManagerServiceServer() {
}

// UnsafeQueueStateManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueStateManagerServiceServer will
// result in compilation errors.
type UnsafeQueueStateManagerServiceServer interface {
	mustEmbedUnimplementedQueueStateManagerServiceServer()
}

func RegisterQueueStateManagerServiceServer(s grpc.ServiceRegistrar, srv QueueStateManagerServiceServer) {
	s.RegisterService(&QueueStateManagerService_ServiceDesc, srv)
}

func _QueueStateManagerService_GetRequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueStateManagerServiceServer).GetRequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueStateManagerService_GetRequestState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueStateManagerServiceServer).GetRequestState(ctx, req.(*GetRequestStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueStateManagerService_ServiceDesc is the grpc.ServiceDesc for QueueStateManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueStateManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.llmcloud.queuestatemanager.v1.QueueStateManagerService",
	HandlerType: (*QueueStateManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequestState",
			Handler:    _QueueStateManagerService_GetRequestState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/llmcloud/queuestatemanager/v1/queuestatemanager.proto",
}
