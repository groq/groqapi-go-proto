// Copyright 2023 Groq Inc.
// All Rights Reserved.
//
// Definition of the Inference API Service.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: public/llmcloud/requestmanager/v1/requestmanager.proto

package requestmanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RequestManagerService_GetTextCompletionStream_FullMethodName = "/public.llmcloud.requestmanager.v1.RequestManagerService/GetTextCompletionStream"
	RequestManagerService_GetTextCompletion_FullMethodName       = "/public.llmcloud.requestmanager.v1.RequestManagerService/GetTextCompletion"
)

// RequestManagerServiceClient is the client API for RequestManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestManagerServiceClient interface {
	// completes text based on query and get back a stream of tokens
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetTextCompletionStream(ctx context.Context, in *GetTextCompletionRequest, opts ...grpc.CallOption) (RequestManagerService_GetTextCompletionStreamClient, error)
	// completes text based on query and get back a message with the full response
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetTextCompletion(ctx context.Context, in *GetTextCompletionRequest, opts ...grpc.CallOption) (*GetTextCompletionResponse, error)
}

type requestManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestManagerServiceClient(cc grpc.ClientConnInterface) RequestManagerServiceClient {
	return &requestManagerServiceClient{cc}
}

func (c *requestManagerServiceClient) GetTextCompletionStream(ctx context.Context, in *GetTextCompletionRequest, opts ...grpc.CallOption) (RequestManagerService_GetTextCompletionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RequestManagerService_ServiceDesc.Streams[0], RequestManagerService_GetTextCompletionStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &requestManagerServiceGetTextCompletionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RequestManagerService_GetTextCompletionStreamClient interface {
	Recv() (*GetTextCompletionStreamResponse, error)
	grpc.ClientStream
}

type requestManagerServiceGetTextCompletionStreamClient struct {
	grpc.ClientStream
}

func (x *requestManagerServiceGetTextCompletionStreamClient) Recv() (*GetTextCompletionStreamResponse, error) {
	m := new(GetTextCompletionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *requestManagerServiceClient) GetTextCompletion(ctx context.Context, in *GetTextCompletionRequest, opts ...grpc.CallOption) (*GetTextCompletionResponse, error) {
	out := new(GetTextCompletionResponse)
	err := c.cc.Invoke(ctx, RequestManagerService_GetTextCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestManagerServiceServer is the server API for RequestManagerService service.
// All implementations must embed UnimplementedRequestManagerServiceServer
// for forward compatibility
type RequestManagerServiceServer interface {
	// completes text based on query and get back a stream of tokens
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetTextCompletionStream(*GetTextCompletionRequest, RequestManagerService_GetTextCompletionStreamServer) error
	// completes text based on query and get back a message with the full response
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetTextCompletion(context.Context, *GetTextCompletionRequest) (*GetTextCompletionResponse, error)
	mustEmbedUnimplementedRequestManagerServiceServer()
}

// UnimplementedRequestManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequestManagerServiceServer struct {
}

func (UnimplementedRequestManagerServiceServer) GetTextCompletionStream(*GetTextCompletionRequest, RequestManagerService_GetTextCompletionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTextCompletionStream not implemented")
}
func (UnimplementedRequestManagerServiceServer) GetTextCompletion(context.Context, *GetTextCompletionRequest) (*GetTextCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextCompletion not implemented")
}
func (UnimplementedRequestManagerServiceServer) mustEmbedUnimplementedRequestManagerServiceServer() {}

// UnsafeRequestManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestManagerServiceServer will
// result in compilation errors.
type UnsafeRequestManagerServiceServer interface {
	mustEmbedUnimplementedRequestManagerServiceServer()
}

func RegisterRequestManagerServiceServer(s grpc.ServiceRegistrar, srv RequestManagerServiceServer) {
	s.RegisterService(&RequestManagerService_ServiceDesc, srv)
}

func _RequestManagerService_GetTextCompletionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTextCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RequestManagerServiceServer).GetTextCompletionStream(m, &requestManagerServiceGetTextCompletionStreamServer{stream})
}

type RequestManagerService_GetTextCompletionStreamServer interface {
	Send(*GetTextCompletionStreamResponse) error
	grpc.ServerStream
}

type requestManagerServiceGetTextCompletionStreamServer struct {
	grpc.ServerStream
}

func (x *requestManagerServiceGetTextCompletionStreamServer) Send(m *GetTextCompletionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RequestManagerService_GetTextCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestManagerServiceServer).GetTextCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestManagerService_GetTextCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestManagerServiceServer).GetTextCompletion(ctx, req.(*GetTextCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestManagerService_ServiceDesc is the grpc.ServiceDesc for RequestManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.llmcloud.requestmanager.v1.RequestManagerService",
	HandlerType: (*RequestManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTextCompletion",
			Handler:    _RequestManagerService_GetTextCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTextCompletionStream",
			Handler:       _RequestManagerService_GetTextCompletionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "public/llmcloud/requestmanager/v1/requestmanager.proto",
}
